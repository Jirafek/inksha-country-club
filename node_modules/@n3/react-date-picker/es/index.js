import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _regeneratorRuntime from "@babel/runtime/helpers/regeneratorRuntime";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { PureComponent } from 'react';
import Dropdown from 'react-overlays/Dropdown';
import cx from 'classnames';
import Field from "./field";
import Menu from "./menu";
import { hasSupportLocal, defaultLocal } from "./locales";
import defaultParseDate from "./defaults/parseDate";
import defaultDisplayFormat from "./defaults/displayFormat";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export * from "./types";

var DatePicker = /*#__PURE__*/function (_PureComponent) {
  _inherits(DatePicker, _PureComponent);

  var _super = _createSuper(DatePicker);

  function DatePicker() {
    var _this;

    _classCallCheck(this, DatePicker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      show: false
    });

    _defineProperty(_assertThisInitialized(_this), "onToggle", function (isOpened) {
      _this.setState({
        show: isOpened
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onClear", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var _this$props, range, onChange;

      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this$props = _this.props, range = _this$props.range, onChange = _this$props.onChange;
              _context.next = 3;
              return _this.setState({
                show: false
              });

            case 3:
              _context.next = 5;
              return onChange(range ? {
                from: null,
                to: null
              } : null);

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));

    _defineProperty(_assertThisInitialized(_this), "parseDate", function (value) {
      var _this$props2 = _this.props,
          parseDate = _this$props2.parseDate,
          locale = _this$props2.locale;

      if (!value) {
        return null;
      }

      return parseDate(value, locale);
    });

    _defineProperty(_assertThisInitialized(_this), "parseDateSingle", function (value) {
      var parsed = _this.parseDate(value);

      if (Array.isArray(parsed)) {
        return parsed[0];
      }

      return parsed;
    });

    _defineProperty(_assertThisInitialized(_this), "renderDropdown", function () {
      var _this$props3 = _this.props,
          range = _this$props3.range,
          from = _this$props3.from,
          to = _this$props3.to,
          value = _this$props3.value,
          locale = _this$props3.locale,
          displayFormat = _this$props3.displayFormat,
          className = _this$props3.className,
          minDate = _this$props3.minDate,
          maxDate = _this$props3.maxDate,
          onChange = _this$props3.onChange,
          defaultFocus = _this$props3.defaultFocus,
          popperConfig = _this$props3.popperConfig,
          containerRef = _this$props3.containerRef,
          isDateDisabled = _this$props3.isDateDisabled;
      var startDate = range ? from : value;
      var endDate = range ? to : null;
      var commonProps = {
        startDate: startDate || null,
        endDate: endDate || null,
        range: range || false,
        locale: hasSupportLocal(locale || defaultLocal) && locale || defaultLocal,
        displayFormat: displayFormat || defaultDisplayFormat
      };
      return /*#__PURE__*/_jsxs("div", {
        className: cx('n3-date-picker', className),
        children: [/*#__PURE__*/_jsx(Field, _objectSpread(_objectSpread({}, commonProps), {}, {
          canClear: _this.canClear(),
          onClear: _this.onClear
        })), /*#__PURE__*/_jsx(Menu, _objectSpread(_objectSpread({}, commonProps), {}, {
          onChange: onChange,
          minDate: minDate,
          maxDate: maxDate,
          defaultFocus: defaultFocus,
          popperConfig: popperConfig,
          parseDate: _this.parseDateSingle,
          containerRef: containerRef,
          isDateDisabled: isDateDisabled
        }))]
      });
    });

    return _this;
  }

  _createClass(DatePicker, [{
    key: "canClear",
    value: function canClear() {
      var _this$props4 = this.props,
          clear = _this$props4.clear,
          range = _this$props4.range,
          from = _this$props4.from,
          to = _this$props4.to,
          value = _this$props4.value;

      if (!clear) {
        return false;
      }

      if (range) {
        return Boolean(from) || Boolean(to);
      }

      return Boolean(value);
    }
  }, {
    key: "render",
    value: function render() {
      var show = this.state.show;
      return /*#__PURE__*/_jsx(Dropdown, {
        drop: "down",
        show: show,
        onToggle: this.onToggle,
        children: this.renderDropdown()
      });
    }
  }]);

  return DatePicker;
}(PureComponent);

_defineProperty(DatePicker, "defaultProps", {
  value: null,
  from: null,
  to: null,
  range: false,
  clear: false,
  locale: defaultLocal,
  parseDate: defaultParseDate,
  displayFormat: defaultDisplayFormat,
  minDate: null,
  maxDate: null,
  className: null,
  defaultFocus: null,
  containerRef: null,
  isDateDisabled: null
});

_defineProperty(DatePicker, "displayName", 'ReactDatePicker');

export default DatePicker;