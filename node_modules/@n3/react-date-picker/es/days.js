import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { Component } from 'react';
import isSameDay from 'date-fns/isSameDay';
import subMonths from 'date-fns/subMonths';
import defaultGetDate from "./defaults/getDate";
import ScrollArea from "./scrollArea";
import Day from "./day";
import getMonthHeight from "./utils/getMonthHeight";
import createMonthDays from "./utils/createMonthDays";
import getOffset from "./utils/getOffset";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

var getDaysRefOffset = function getDaysRefOffset(calendarHeight, selected) {
  return calendarHeight / 2 - getMonthHeight(subMonths(selected, 1)) - getMonthHeight(subMonths(selected, 2)) + getOffset(selected);
};

var Days = /*#__PURE__*/function (_Component) {
  _inherits(Days, _Component);

  var _super = _createSuper(Days);

  function Days() {
    var _this;

    _classCallCheck(this, Days);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (deltaY) {
      var _this$props = _this.props,
          selected = _this$props.selected,
          onScroll = _this$props.onScroll,
          getDate = _this$props.getDate;

      if (getDate && selected) {
        var date = getDate(selected, deltaY);
        onScroll(date);
      }
    });

    return _this;
  }

  _createClass(Days, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          selected = _this$props2.selected,
          isSelected = _this$props2.isSelected,
          isBordered = _this$props2.isBordered,
          isDisabled = _this$props2.isDisabled,
          onDayChange = _this$props2.onDayChange,
          calendarHeight = _this$props2.calendarHeight,
          locale = _this$props2.locale;
      var months = selected ? createMonthDays(subMonths(selected, 2), 5, locale) : [];
      return /*#__PURE__*/_jsx("div", {
        className: "n3__date-picker__days-wrapper",
        children: /*#__PURE__*/_jsx(ScrollArea, {
          className: "n3__date-picker__days",
          style: {
            marginTop: selected ? getDaysRefOffset(calendarHeight, selected) : undefined
          },
          onChange: this.handleChange,
          children: months.map(function (_ref, i) {
            var monthStr = _ref.monthStr,
                days = _ref.days;
            return /*#__PURE__*/_jsxs("div", {
              className: "n3__date-picker__days-month",
              children: [/*#__PURE__*/_jsx("div", {
                className: "n3__date-picker__days-month-title",
                children: monthStr
              }), days.map(function (week, j) {
                return /*#__PURE__*/_jsx("div", {
                  className: "n3__date-picker__days-week",
                  children: week.map(function (value, k) {
                    return /*#__PURE__*/_jsx(Day, {
                      value: value,
                      isSelected: isSelected(value),
                      isBordered: isBordered(value),
                      isDisabled: value ? isDisabled(value, isSameDay) : true,
                      onChange: onDayChange
                    }, k);
                  })
                }, j);
              })]
            }, i);
          })
        })
      });
    }
  }]);

  return Days;
}(Component);

_defineProperty(Days, "defaultProps", {
  getDate: defaultGetDate
});

export default Days;