import { Component } from 'react';
import type { ChangeEvent, FocusEvent, KeyboardEvent, MouseEvent, HTMLAttributes } from 'react';
import type { CheckEqualType, LocaleType, OnChangeValueType } from './types';
declare type InputFieldName = 'from' | 'to';
export declare type MenuContentProps<IsRange extends boolean = false> = {
    startDate?: Date | null;
    endDate?: Date | null;
    show: boolean;
    range?: IsRange;
    parseDate: (value: string, locale: LocaleType) => Date | null | undefined;
    close: () => void | Promise<void>;
    minDate?: Date | null;
    maxDate?: Date | null;
    displayFormat: (value: Date | null | undefined, locale: LocaleType) => string;
    locale: LocaleType;
    defaultFocus?: Date | Date[];
    onChange: (value: OnChangeValueType<IsRange>) => void;
    domProps?: HTMLAttributes<HTMLDivElement>;
    isDateDisabled?: (value: Date) => boolean | null;
};
declare type StateType = {
    focusField: InputFieldName;
    from: string;
    to: string;
    selected?: Date | null;
    show: boolean;
};
declare class MenuContent<IsRange extends boolean = false> extends Component<MenuContentProps<IsRange>, StateType> {
    static defaultProps: {
        range: boolean;
        startDate: null;
        endDate: null;
        minDate: null;
        maxDate: null;
        defaultFocus: null;
        domProps: {};
        style: {};
    };
    constructor(props: MenuContentProps<IsRange>);
    static getDerivedStateFromProps(props: MenuContentProps, state: StateType): StateType | {
        show: false;
    } | null;
    onFocus: ({ target: { name, }, }: FocusEvent<HTMLInputElement>) => void;
    onClick: ({ target, }: MouseEvent<HTMLInputElement>) => Promise<void>;
    onInputChange: ({ target: { value, }, }: ChangeEvent<HTMLInputElement>) => Promise<void>;
    onKeyDown: ({ target, key, }: KeyboardEvent<HTMLInputElement>) => Promise<void>;
    onDayChange: (date: Date | null | undefined) => Promise<void>;
    onSelectedChange: (selected: Date | null) => void;
    focusOnField: (name: InputFieldName) => Promise<void>;
    formatDateValue(fieldName: InputFieldName, value: Date | null | undefined): OnChangeValueType<IsRange>;
    shouldCloseMenu: (focusField: InputFieldName) => boolean;
    isValid(value: string): boolean;
    isSelected: (day: Date | null) => boolean;
    isBordered: (day: Date | null) => boolean;
    isDisabled: (day: Date | null, checkEqual: CheckEqualType) => boolean;
    hasFocus: (name: string) => boolean;
    render(): JSX.Element;
}
export default MenuContent;
