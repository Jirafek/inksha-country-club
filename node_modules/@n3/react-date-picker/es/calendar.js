import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { createRef, Component } from 'react';
import cx from 'classnames';
import locales from "./locales";
import Days from "./days";
import Months from "./months";
import Years from "./years";
import getCssValue from "./utils/getCssValue";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

var isWeekend = function isWeekend(weekdayIndex) {
  return [0, 6].includes(weekdayIndex);
};

var preventDefault = function preventDefault(event) {
  event.preventDefault();
};

var Calendar = /*#__PURE__*/function (_Component) {
  _inherits(Calendar, _Component);

  var _super = _createSuper(Calendar);

  function Calendar(props) {
    var _this;

    _classCallCheck(this, Calendar);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "calendarHeight", void 0);

    _defineProperty(_assertThisInitialized(_this), "monthsSelectionOffset", void 0);

    _defineProperty(_assertThisInitialized(_this), "monthsSelectionSpace", void 0);

    _defineProperty(_assertThisInitialized(_this), "datesRef", /*#__PURE__*/createRef());

    _this.calendarHeight = getCssValue('--calendar-height');
    _this.monthsSelectionOffset = getCssValue('--months-selection-height') / 2;
    _this.monthsSelectionSpace = getCssValue('--months-space');
    return _this;
  }

  _createClass(Calendar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var datesRef = this.datesRef.current;

      if (datesRef) {
        datesRef.addEventListener('wheel', preventDefault);
        datesRef.addEventListener('touchmove', preventDefault);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var datesRef = this.datesRef.current;

      if (datesRef) {
        datesRef.removeEventListener('wheel', preventDefault);
        datesRef.removeEventListener('touchmove', preventDefault);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          locale = _this$props.locale,
          selected = _this$props.selected,
          onChange = _this$props.onChange,
          onDayChange = _this$props.onDayChange,
          isDisabled = _this$props.isDisabled,
          isBordered = _this$props.isBordered,
          isSelected = _this$props.isSelected;
      var calendarHeight = this.calendarHeight,
          monthsSelectionSpace = this.monthsSelectionSpace,
          monthsSelectionOffset = this.monthsSelectionOffset;
      var _locales$locale = locales[locale],
          weekdaysOrdering = _locales$locale.weekdaysOrdering,
          weekdays = _locales$locale.weekdays;
      return /*#__PURE__*/_jsxs("div", {
        className: "n3__date-picker-calendar",
        children: [/*#__PURE__*/_jsx("div", {
          className: "n3__date-picker-calendar__weekdays",
          children: weekdaysOrdering.map(function (weekdayIndex) {
            return /*#__PURE__*/_jsx("span", {
              className: cx('n3__date-picker-calendar__weekday', {
                'n3__date-picker-calendar__weekday_weekend': isWeekend(weekdayIndex)
              }),
              children: weekdays[weekdayIndex]
            }, weekdayIndex);
          })
        }), /*#__PURE__*/_jsxs("div", {
          ref: this.datesRef,
          className: "n3__date-picker-calendar__dates",
          children: [/*#__PURE__*/_jsx(Days, {
            locale: locale,
            selected: selected,
            isSelected: isSelected,
            isBordered: isBordered,
            isDisabled: isDisabled,
            onDayChange: onDayChange,
            onScroll: onChange,
            calendarHeight: calendarHeight
          }), /*#__PURE__*/_jsx(Months, {
            locale: locale,
            selected: selected,
            format: "MMM",
            onChange: onChange,
            onScroll: onChange,
            isDisabled: isDisabled,
            calendarHeight: calendarHeight,
            offset: monthsSelectionOffset,
            space: monthsSelectionSpace
          }), /*#__PURE__*/_jsx(Years, {
            locale: locale,
            selected: selected,
            onScroll: onChange,
            isDisabled: isDisabled
          })]
        })]
      });
    }
  }]);

  return Calendar;
}(Component);

export default Calendar;