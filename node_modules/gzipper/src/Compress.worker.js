"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var worker_threads_1 = require("worker_threads");
var fs_1 = __importDefault(require("fs"));
var uuid_1 = require("uuid");
var util_1 = __importDefault(require("util"));
var stream_1 = __importDefault(require("stream"));
var path_1 = __importDefault(require("path"));
var constants_1 = require("./constants");
var helpers_1 = require("./helpers");
var Logger_1 = require("./logger/Logger");
var Compress_service_1 = require("./Compress.service");
var Incremental_1 = require("./Incremental");
var CompressWorker = /** @class */ (function () {
    function CompressWorker() {
        this.nativeFs = {
            lstat: util_1.default.promisify(fs_1.default.lstat),
            exists: util_1.default.promisify(fs_1.default.exists),
            unlink: util_1.default.promisify(fs_1.default.unlink),
        };
        this.nativeStream = {
            pipeline: util_1.default.promisify(stream_1.default.pipeline),
        };
        this.options = worker_threads_1.workerData.options;
        this.chunk = worker_threads_1.workerData.chunk;
        this.target = worker_threads_1.workerData.target;
        this.outputPath = worker_threads_1.workerData.outputPath;
        this.incrementalFilePaths = worker_threads_1.workerData.incrementalFilePaths;
        if (this.options.incremental) {
            this.incremental = new Incremental_1.Incremental();
            this.incremental.filePaths = this.incrementalFilePaths;
        }
        Logger_1.Logger.setVerboseMode(this.options.verbose);
        this.service = new Compress_service_1.CompressService(this.options);
        this.compressionInstances = this.service.getCompressionInstances();
    }
    /**
     * Compress files list and returns files and incremental data.
     */
    CompressWorker.prototype.compressFiles = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var filesList, _b, _c, compressionInstance, _d, _e, filePath, hrtimeStart, fileInfo, hrTimeEnd, e_1_1, e_2_1;
            var e_2, _f, e_1, _g;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        filesList = [];
                        _h.label = 1;
                    case 1:
                        _h.trys.push([1, 12, 13, 14]);
                        _b = __values(this.compressionInstances), _c = _b.next();
                        _h.label = 2;
                    case 2:
                        if (!!_c.done) return [3 /*break*/, 11];
                        compressionInstance = _c.value;
                        _h.label = 3;
                    case 3:
                        _h.trys.push([3, 8, 9, 10]);
                        _d = (e_1 = void 0, __values(this.chunk)), _e = _d.next();
                        _h.label = 4;
                    case 4:
                        if (!!_e.done) return [3 /*break*/, 7];
                        filePath = _e.value;
                        hrtimeStart = process.hrtime();
                        return [4 /*yield*/, this.compressFile(path_1.default.basename(filePath), path_1.default.dirname(filePath), compressionInstance)];
                    case 5:
                        fileInfo = _h.sent();
                        if (!fileInfo.removeCompressed && !fileInfo.isSkipped) {
                            filesList.push(filePath);
                        }
                        if (this.options.verbose) {
                            hrTimeEnd = process.hrtime(hrtimeStart);
                            Logger_1.Logger.log(this.getCompressedFileMsg(compressionInstance, filePath, fileInfo, hrTimeEnd));
                        }
                        _h.label = 6;
                    case 6:
                        _e = _d.next();
                        return [3 /*break*/, 4];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_1_1 = _h.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (_e && !_e.done && (_g = _d.return)) _g.call(_d);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 10:
                        _c = _b.next();
                        return [3 /*break*/, 2];
                    case 11: return [3 /*break*/, 14];
                    case 12:
                        e_2_1 = _h.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 14];
                    case 13:
                        try {
                            if (_c && !_c.done && (_f = _b.return)) _f.call(_b);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 14: return [2 /*return*/, {
                            files: filesList,
                            filePaths: (_a = this.incremental) === null || _a === void 0 ? void 0 : _a.filePaths,
                        }];
                }
            });
        });
    };
    /**
     * File compression.
     */
    CompressWorker.prototype.compressFile = function (filename, target, compressionInstance) {
        return __awaiter(this, void 0, void 0, function () {
            var createCompression, isCached, isSkipped, inputPath, isFileTarget, outputPath, checksum, _a, isChanged, fileId, cachedFile, beforeSize, afterSize, removeCompressed;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, compressionInstance.getCompression()];
                    case 1:
                        createCompression = _b.sent();
                        isCached = false;
                        isSkipped = false;
                        inputPath = path_1.default.join(target, filename);
                        if (!this.outputPath) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.nativeFs.lstat(this.target)];
                    case 2:
                        isFileTarget = (_b.sent()).isFile();
                        target = isFileTarget
                            ? this.outputPath
                            : path_1.default.join(this.outputPath, path_1.default.relative(this.target, target));
                        return [4 /*yield*/, helpers_1.Helpers.createFolders(target)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        outputPath = this.getOutputPath(target, filename, compressionInstance.ext);
                        if (!this.options.skipCompressed) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.nativeFs.exists(outputPath)];
                    case 5:
                        if (_b.sent()) {
                            isSkipped = true;
                            return [2 /*return*/, { isCached: isCached, isSkipped: isSkipped }];
                        }
                        _b.label = 6;
                    case 6:
                        if (!this.options.incremental) return [3 /*break*/, 14];
                        return [4 /*yield*/, this.incremental.getFileChecksum(inputPath)];
                    case 7:
                        checksum = _b.sent();
                        return [4 /*yield*/, this.incremental.setFile(inputPath, checksum, compressionInstance.compressionName, compressionInstance.compressionOptions)];
                    case 8:
                        _a = _b.sent(), isChanged = _a.isChanged, fileId = _a.fileId;
                        cachedFile = path_1.default.resolve(this.incremental.cacheFolder, fileId);
                        if (!isChanged) return [3 /*break*/, 11];
                        return [4 /*yield*/, this.nativeStream.pipeline(fs_1.default.createReadStream(inputPath), createCompression, fs_1.default.createWriteStream(outputPath))];
                    case 9:
                        _b.sent();
                        return [4 /*yield*/, this.nativeStream.pipeline(fs_1.default.createReadStream(outputPath), fs_1.default.createWriteStream(cachedFile))];
                    case 10:
                        _b.sent();
                        return [3 /*break*/, 13];
                    case 11: return [4 /*yield*/, this.nativeStream.pipeline(fs_1.default.createReadStream(cachedFile), fs_1.default.createWriteStream(outputPath))];
                    case 12:
                        _b.sent();
                        isCached = true;
                        _b.label = 13;
                    case 13: return [3 /*break*/, 16];
                    case 14: return [4 /*yield*/, this.nativeStream.pipeline(fs_1.default.createReadStream(inputPath), createCompression, fs_1.default.createWriteStream(outputPath))];
                    case 15:
                        _b.sent();
                        _b.label = 16;
                    case 16:
                        if (!(this.options.verbose || this.options.removeLarger)) return [3 /*break*/, 21];
                        return [4 /*yield*/, this.nativeFs.lstat(inputPath)];
                    case 17:
                        beforeSize = (_b.sent()).size;
                        return [4 /*yield*/, this.nativeFs.lstat(outputPath)];
                    case 18:
                        afterSize = (_b.sent()).size;
                        removeCompressed = this.options.removeLarger && beforeSize < afterSize;
                        if (!removeCompressed) return [3 /*break*/, 20];
                        return [4 /*yield*/, this.nativeFs.unlink(outputPath)];
                    case 19:
                        _b.sent();
                        _b.label = 20;
                    case 20: return [2 /*return*/, {
                            beforeSize: beforeSize,
                            afterSize: afterSize,
                            isCached: isCached,
                            isSkipped: isSkipped,
                            removeCompressed: removeCompressed,
                        }];
                    case 21: return [2 /*return*/, { isCached: isCached, isSkipped: isSkipped }];
                }
            });
        });
    };
    /**
     * Get output path which is based on [outputFileFormat].
     */
    CompressWorker.prototype.getOutputPath = function (target, file, ext) {
        var artifactsMap = new Map([
            ['[filename]', path_1.default.parse(file).name],
            ['[ext]', path_1.default.extname(file).slice(1)],
            ['[compressExt]', ext],
        ]);
        var filename = "".concat(artifactsMap.get('[filename]'), ".").concat(artifactsMap.get('[ext]'), ".").concat(artifactsMap.get('[compressExt]'));
        if (this.options.outputFileFormat) {
            artifactsMap.set('[hash]', null);
            filename = this.options.outputFileFormat.replace(constants_1.OUTPUT_FILE_FORMAT_REGEXP, function (artifact) {
                if (artifactsMap.has(artifact)) {
                    // Need to generate hash only if we have appropriate param
                    if (artifact === '[hash]') {
                        artifactsMap.set('[hash]', (0, uuid_1.v4)());
                    }
                    return artifactsMap.get(artifact);
                }
                else {
                    return artifact;
                }
            });
        }
        return "".concat(path_1.default.join(target, filename));
    };
    /**
     * Returns information message about compressed file (size, time, cache, etc.)
     */
    CompressWorker.prototype.getCompressedFileMsg = function (compressionInstance, file, fileInfo, hrtime) {
        var fileRelative = path_1.default.relative(this.target, file);
        var compressionName = compressionInstance.compressionName;
        if (fileInfo.isSkipped) {
            return "File ".concat(fileRelative, " has been skipped.");
        }
        var getSize = "".concat(helpers_1.Helpers.readableSize(fileInfo.beforeSize), " -> ").concat(helpers_1.Helpers.readableSize(fileInfo.afterSize));
        var getTime = helpers_1.Helpers.readableHrtime(hrtime);
        var fileMessage = fileInfo.isCached
            ? "File ".concat(fileRelative, " has been retrieved from the cache.")
            : "File ".concat(fileRelative, " has been compressed.");
        return "".concat(fileMessage, " \n\n      Algorithm: ").concat(compressionName, " \n\n      Size: ").concat(getSize, " \n\n      Time: ").concat(getTime);
    };
    return CompressWorker;
}());
var compressWorker = new CompressWorker();
(function () {
    return __awaiter(this, void 0, void 0, function () {
        var _a, files, filePaths;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, compressWorker.compressFiles()];
                case 1:
                    _a = _b.sent(), files = _a.files, filePaths = _a.filePaths;
                    worker_threads_1.parentPort === null || worker_threads_1.parentPort === void 0 ? void 0 : worker_threads_1.parentPort.postMessage({ files: files, filePaths: filePaths });
                    return [2 /*return*/];
            }
        });
    });
})();
//# sourceMappingURL=data:application/json;base64,